Устанавливаем Gitlab на компьютер, регистрируемся на сайте Gitlab - 1devorg создаем пустой project с названеим git_laravel
Создаем проект git_laravel (Laravel 10) на компьютере. В терминале PC проекта (git_laravel) инициализируем Git, введя
команду - git init. После чего создасться в проекте директория .git по пути - E:/SKLAD/OSPanel/domains/git_laravel/.git/
Но эта директория скрыта в Windows, нужно "активировать скрытые элементы" в проводнике и увидим папку.

PhpStorm также может не подцепить .git Для исправления этого необходимо перезапустить IDE и тогда можем заметить
- некоторые файлы будут красного цвета.

Важно держать эту папку именно в том проекте-папке с которой работаем, так как она (Git) "следит" за той дирректорией,
в которой она находится (проинициализирована) - видит все папки и изменения в этой директории
Ему не важно что лежит в папке, какие файлы, на каком языке написано и тд Видит и работает с любыми файлами

Но не все папки проекта могут сразу быть видны .git, так как Git видит изначально только те что были изменены
после инициализации. Какие в него не добавлены можно узнать командой - git status
Можем получить следующее сообщение: Неотслеживаемые файлы:
                                     (используйте "git add <файл>...", чтобы включить в то, что будет зафиксировано)

Потому необходимо добавить в .git весь проект вручную их из выпавшего списка -
"git add <файл>" или все сразу - "git add *"

Теперь все красные файлы проекта станут Зеленого цвета.

Таким образом созданный project - git_laravel на сайте Gitlab.com становится удаленным репозитарием для нашего - .git
С которого мы будем клонировать наш проект с компьютера

Теперь необходимо сделать COMMIT - ЗАФИКСИРОВАТЬ изменения командой - git commit. Если хотим чтобы еще и с коментирование
то добавляем к окманде - -m "<message>" - к примеру - git commit -m "init git_laravel"
После чего файлы проекта примут Белый цвет

Таким образом проверяем начиная с Инструкции добавлены ли файлы в отслеживаемые - git status, если есть таковые
добавляем - git add <файл>, далее Фиксируем - git commit ... Также поступаем если изменили какой либо файл

По итогу должны получить такое сообщение в терминале: On branch master
                                                      nothing to commit, working tree clean



        !!!!!!  Git в целом и Git в Php Storm 6. Заливаем проект на github/gitlab. Первый push на github/gitlab

Ветка Master уже создана предыдущей командой - git init, и не нужно сейчас пока добавлять дополнительные ветки.
Можно к примеру создать новую ветку командой на примере Master ветки - dit branch -M main

Теперь нужно Запушить проект на удаленный репозитарий. Деаем это командой -
git remote add origin https://github.com/1devorg/git_laravel.git Вместо "origin" може написать все что захотим
это лишь название. После для окончательного Пуша необходимо прописать команду - git push -u origin main
Где origin это просто название которое заменяем на свое - github а main означает Master ветка,
но у нас она называется - master (видели ранее в терминале после git init)

И так первая команда - git remote add github https://gitlab.com/1devorg/git_laravel.git
Вторая окончательная - git push -u github master

Но, если перед этим не предложит поключиться к GitHub нужно подключиться через логин и пароль 1devorg командой для Логина -
git config credential.username "1devorg" и выйдет окошко Входа в GitHub
(возможно нужно будети создать ветку master -git branch -M main)

                             ТЕПЕРЬ проделаем тоже самое для GitLab

      !!!!!!  Git в целом и Git в Php Storm 7. Заливаем проект на gitlab. push на gitlab. Commit и push в phpstorm

Пушим наш готовый проект через команду - git remote add gitlab https://gitlab.com/1devorg/git_laravel.git
Путь берем зайдя в папку репозитария в - Code - Clone with HTTPS - https://gitlab.com/1devorg/git_laravel.git

Проект готов Запушиться. И теперь можем посмотреть какие пути отправки пуша есть командой - git remote -v
И получим: gitlab  https://gitlab.com/1devorg/git_laravel (fetch)
           gitlab  https://gitlab.com/1devorg/git_laravel (push)

gitlab - это придуманное нами выше название (git remote add gitlab ...)

Позже рассмотрим что это за fetch и push Сейчас же сделаем окончательный пуш командой - git push gitlab master

Теперь все Запушилось, можем это увидеть зайдя в Репозитарий проекта и выбрав ветку - master, где будет лежать проект

Так же если прямо в проекте Laravel в IDE добавим какой-то файл, IDE само спросит, добавить ли файл в .git
Можно согласившись нажать - больше не спрашивать. И дальнейшие внесение файлов будут происходить автоматически
Изменяя цвет с красного на зеленый

С GitLab можно работать напрямую из PhpStorm. Наверху есть галочка - commit, которая покажет в какие
файлы внесены изменения и нужно добавить с возможностью комментрования внизу окна, куда вписываем тоже
что и в консоли ранее, после флага -m (git commit -m "init git_laravel+changed instrukcii.txt")
И выбор просто Закомитить или Закомитить и Пушнуть, вбив данные от GitLab в окошко авторизации
Стрелка - PUSH есть также наверху в блоке Git

Также можем Закомитить и Запушить на GitHub, выбрав в окне IDE на этапе master -> github (вместо gitlab)
Где также перебросит для авторизации на GitHub через сайт PhpStorm
Бывает зависание, потому пробуем еще раз


           !!!!!!   GIT В ЦЕЛОМ И GIT В PHP STORM 8. СОЗДАНИЕ ВЕТКИ DEVELOP В GITLAB И GITHUB. GIT FETCH С GITHUB GITLAB


В этом уроке научимся закачивать проект с GitHub и GitLab к себе, создав ветку разработчика
Создавать Ветки (Branch) необходимо на сайтах GitHub и GitLab не через терминал IDE

И так, в GitHub в Проекте нажимаем на ветку - master и в выпадающем окне вписываем название - develop, отметив -
Create branch: develop from 'master' Что означает что ветка создается от основной ветки - master

Теперь создаем develop в GitLab Переходим в раздел Branches, нажимаем на New branch, где прописываем название - develop
и ниже выбираем from master (не main ) и жмем создать ветку

Обратите внимание, внизу IDE значек с Git ветками, где можно увидеть локальный проект и в Remote 2 ветки удаленных
репозитариев GitLab и GitHub

После того как создали ветки develop в удаленных репозитариях, необходимо синхронизировать их с локальным .git нашего
проекта на компьютере. То есть все удаленное состояние хранилищей должны перетянуть к себе на машину.

Для начала смотрим сколько Веток у нас на локальной машине, для этого просто пишем команду - git branch Увидим что
только ветка - main или master. а если более уточняющую команду - git branch -r То увидим что две основные:
  github/master
  gitlab/master

Потому, чтобы подтянуть веткеу develop локально, пишем следущую команду - git fetch
Если из какого либо депозитария не подтянется ветка, просто дополняем команду git fetch - git fetch github
Название github видим все в томже нижнем правом углу IDE

Но, на данный момент все же ветки develop не локальны, только удаленными являются. Чтобы при команде - git branch
мы видели и ветки develop локально

Для этого пишем следующую команду - git checkout -b develop gitlab/develop То есть, создаем локальную ветку - develop
в проекте. Пусть и от gitlab/master, но она (наверное) общая

Переключаться между ветками можно командо - git checkout <нужное название локально ветки - master, develop, main>

Но перед тем как переключиться IDE будет просить сохранитиь/закомитить изменения


Теперь проделаем это же силами PhpStorm, хотя ветку по прежнему необходимо создавать на удаленном хранилище
вручную. К примеру создадим Ветку - test от Ветки develop в обоих хранилищах

Куда склонируется содержимое из Веток develop

Теперь в PphStorm в нижнем правом углу выбираем Git Ветки, где просто жмем на Fetch. И увидим как создались/подтянулись
новые ветки репозитарии в в разделе Remote. Чтобы появилась Локальная Ветка test, просто выбираем любьую из них
в в разделе Remote и жмем на их Checkout, так ветки test появяться локально





ВАЖНО: Иногда при PUSH может возникнуть проблема с опережением/различием в ветках Локально и Удаленно
потому приходится разбираться. Есть способ решить -  git push -f <выбираем название удаленного сервиса и
репозитарий, к примеру - github develop> Есть опасность что потруться данные, но пока такой способ подобрал

ВАЖНО: Команда PUSH - git push -u <удаленное хранилище, репозиторий, к примеру - gitlab master>
Будет пушить из Локального Репозитория в удаленный с тем же названием. Из master в master
из develop в develop (Ниже разберем как пушить в отличающиеся репозитарии)


    !!!!!!      GIT В ЦЕЛОМ И GIT В PHP STORM 9. GIT CLONE И .GITIGNORE. КЛОНИРУЕМ ПРОЕКТ С GITHUB И GITLAB

Представим что пришел новый сотрудник, фрилансер и ему нужно скачать себе на машину проект. Деается это очень
просто. На примере GitHub, заходим на него, жмем кнопку Code выбираем для первого примера HTTPS протокол,
копируем адрес, к примеру - https://github.com/1devorg/git_laravel.git
Далее на локальной машине переходим в терминале в ту дирректорию в которую хотим склонировать
проект, и пишем команду - git clone https://github.com/1devorg/git_laravel.git git_laravel_clone
Где последнее это название папки которая создасться и в которую будет помещен склонированный проект

Теперь можно обратить внимание на такую особенность как несоотвествие количество папок и файлов на главной машине
откуда был загружен проект на удаленный репозитарий, с количеством папок и файлов в этом же проекте загруженным
на этот самый репозитарий. Это регулирует такой файл как - .gitignore Образованный при git init (помним)

Это файлик включает в себя то, что будет исключено из проекта при загрузке на удаленный репозитарий. По дефолту содержание:

/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/vendor
.env                 - точка вместо Слэша означает что файл/папка находится на одном уровне с .gitignore
.env.backup
.env.production
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
/.fleet
/.idea
/.vscode

Самые "основные" здесь здесь это:
.env           - Здесь важные подключения и инструкции
/vendor        - Здесь расположены все установленные билиотеки (composer.json) Пчпишный - composer install Потому папка много весит
/node_modules  - Здесь расположены все установленные билиотеки (package.json) - Нодовские - npm install Тоже много весит

Но, само содержимое composer.json и package.json у нас не игнорируются, то новый сотрудник может себе установить те же
библиотеки и зависимости содержащиеся в этих инструкциях при помощи того же Composer, прописав команду уже в своем
Терминале - composer install

Что касается .env, то у себя в проекте новый сторудник должен скопировать и вставить .env.example и переименовать его в .env
Куда прописать полученные от меня данные из моего проекта на моей локальной машине.

ВАЖНО: С остальными файлами/папками нужно дополнительно разобаться. Либо сделать удаленные репозитарии Приватными
и внести в .gitignore только - /vendor
                               /node_modules
                               .env
Либо они установятся в процессе работы над проектом - Vite npm build и тп и тд

                          В случае с GitLab делается все то же самое


      !!!!!!      GIT В ЦЕЛОМ И GIT В PHP STORM 10. СОЗДАНИЕ ЗАДАЧИ(ISSUE) В GITHUB И GITLAB С ВЕТКОЙ И FETCH

Тепрь мы бы работаем как бы новый сотрудник, склонирвавший к себе из Репозитария Проетк с GitHub. От ветки Master
мы должны создать свою ветку, после внесений изменений мы отправляем обновления на ветку Develop. Где мы якобы
проверили работу нашего сайта на ветке Dev, и далее мы отправляем на Master через Develop

К примеру, нам дали задание создать PostController. Мы переходим на сайте GitHub в раздел - Issues (задачи) и жмем New issue
Пишем кратко заголовок/название задачи, к примеру к блоку с котами на сатйе животных нужно создать Post Controller,
блок с кошками коротко назовем - bc и сам заголовок задачи напишем - bc post controller Далее в разделе Assignees (для кого)
выбираем кому предназначена задача, по дефолту стоит самому себе - No one assign yourself и жмем Submit new issue

Снова нажав на раздел с Задчами увидим нашу задачу: bc post controller
                                                    #1 opened 1 minute ago by 1devorg

Теперь переходим в раздел <> Code и выбрав ветку master создаем ветку с названием - 1_bc_post _controller Цифра 1 взята из #1
И жмем Create branch в GitLab делается аналогично и тоже просто

Ну а теперь запускаем команду Fetch в терминале (синяя стрелка) и в нашей IDE появится новая ветка с названием -
1_bc_post _controller Выбрав ее и нажав Checkout переходим запускаем ее локально и переходим в нее




